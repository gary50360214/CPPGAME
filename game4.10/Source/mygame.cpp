/*
 * mygame.cpp: 本檔案儲遊戲本身的class的implementation
*/

#include "stdafx.h"
#include "Resource.h"
#include <mmsystem.h>
#include <ddraw.h>
#include "audio.h"
#include "gamelib.h"
#include "mygame.h"

namespace game_framework
{
void CBouncingBall::SetXY(int x, int y)
{
    this->x = x;
    this->y = y;
}
void CBouncingBall::SetFloor(int floor)
{
    this->floor = floor;
}
void CBouncingBall::SetVelocity(int velocity)
{
    this->velocity = velocity;
    this->initial_velocity = velocity;
}
void CGameMap::InitializeBouncingBall(int ini_index, int row, int col)
{
    const int VELOCITY = 10;
    const int BALL_PIC_HEIGHT = 15;
    int floor = Y + (row + 1) * MH - BALL_PIC_HEIGHT;
    bballs[ini_index].LoadBitmap();
    bballs[ini_index].SetFloor(floor);
    bballs[ini_index].SetVelocity(VELOCITY + col);
    bballs[ini_index].SetXY(X + col * MW + MW / 2, floor);
}
void CGameMap::RandomBouncingBall()
{
    const int MAX_RAND_NUM = 10;
    random_num = (rand() % MAX_RAND_NUM) + 1;
    bballs = new CBouncingBall[random_num];
    int ini_index = 0;

    for (int row = 0; row < 4; row++)
        for (int col = 0; col < 5; col++)
        {
            if (map[row][col] != 0 && ini_index < random_num)
            {
                InitializeBouncingBall(ini_index, row, col);
                ini_index++;
            }
        }
}
void CGameMap::OnKeyDown(UINT nChar)
{
    const int KEY_SPACE = 0x20;

    if (nChar == KEY_SPACE)
        RandomBouncingBall();//隨機彈跳球
}
void CGameMap::OnMove()
{
    for (int i = 0; i < random_num; i++)
    {
        bballs[i].OnMove();
    }
}
CGameMap::~CGameMap()
{
    delete[] bballs;
}

CGameMap::CGameMap()
    : X(20), Y(40), MW(120), MH(100)
{
    /*
    int map_init[4][5] =
    {
        {0, 0, 1, 0, 0},
        {0, 1, 2, 1, 0},
        {1, 2, 1, 2, 1},
        {2, 1, 2, 1, 2}
    };

    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            map[i][j] = map_init[i][j];
    */
    random_num = 0;
    bballs = NULL;
}

void CGameMap::LoadBitmap()
{
    orange.LoadBitmap(IDB_ORANGE, RGB(255, 255, 255));
    star.LoadBitmap(IDB_STAR, RGB(255, 255, 255));
}
void  CGameMap::OnShow()
{
    /* for (int i = 0; i < 5; ++i)
         for (int j = 0; j < 4; ++j)
         {
             switch (map[j][i])
             {
                 case 0:
                     break;

                 case 1:
                     orange.SetTopLeft(X + (MW * i), Y + (MH * j));
                     orange.ShowBitmap();
                     break;

                 case 2:
                     star.SetTopLeft(X + (MW * i), Y + (MH * j));
                     star.ShowBitmap();
                     break;

                 default:
                     ASSERT(0);
             }
         }*/
    for (int i = 0; i < random_num; i++)
    {
        bballs[i].OnShow();
    }
}

CPractice::CPractice()
{
    x = y = 0;
}
void CPractice::OnMove()
{
    if (y <= SIZE_Y)
    {
        x += 3;
        y += 3;
    }
    else
    {
        x = y = 0;
    }
}
void CPractice::LoadBitmap()
{
    pic.LoadBitmap(IDB_1);
}
void CPractice::OnShow()
{
    pic.SetTopLeft(x, y);
    pic.ShowBitmap();
}
CGameStateInit::CGameStateInit(CGame* g)
    : CGameState(g)
{
}
/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的遊戲開頭畫面物件
/////////////////////////////////////////////////////////////////////////////
void CGameStateInit::OnInit()
{
    //
    // 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
    //     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
    //
    ShowInitProgress(0);	// 一開始的loading進度為0%
    //
    // 開始載入資料
    //
    logo.LoadBitmap(IDB_BACKGROUND);
    // Sleep(300);				// 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
    //
    // 此OnInit動作會接到CGameStaterRun::OnInit()，所以進度還沒到100%
    //
}

void CGameStateInit::OnBeginState()
{
}

void CGameStateInit::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags)
{
    const char KEY_ESC = 27;
    const char KEY_SPACE = ' ';

    if (nChar == KEY_SPACE)
        GotoGameState(GAME_STATE_RUN);						// 切換至GAME_STATE_RUN
    else if (nChar == KEY_ESC)								// Demo 關閉遊戲的方法
        PostMessage(AfxGetMainWnd()->m_hWnd, WM_CLOSE, 0, 0);	// 關閉遊戲
}

void CGameStateInit::OnLButtonDown(UINT nFlags, CPoint point)
{
    GotoGameState(GAME_STATE_RUN);		// 切換至GAME_STATE_RUN
}

void CGameStateInit::OnShow()
{
    //
    // 貼上logo
    //
    logo.SetTopLeft((SIZE_X - logo.Width()) / 2, SIZE_Y / 8);
    logo.ShowBitmap();
    //
    // Demo螢幕字型的使用，不過開發時請盡量避免直接使用字型，改用CMovingBitmap比較好
    //
    CDC* pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC
    CFont f, *fp;
    f.CreatePointFont(160, "Times New Roman");	// 產生 font f; 160表示16 point的字
    fp = pDC->SelectObject(&f);					// 選用 font f
    pDC->SetBkColor(RGB(0, 0, 0));
    pDC->SetTextColor(RGB(255, 255, 0));
    pDC->TextOut(120, 220, "Please click mouse or press SPACE to begin.");
    pDC->TextOut(5, 395, "Press Ctrl-F to switch in between window mode and full screen mode.");

    if (ENABLE_GAME_PAUSE)
        pDC->TextOut(5, 425, "Press Ctrl-Q to pause the Game.");

    pDC->TextOut(5, 455, "Press Alt-F4 or ESC to Quit.");
    pDC->SelectObject(fp);						// 放掉 font f (千萬不要漏了放掉)
    CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC
}

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的結束狀態(Game Over)
/////////////////////////////////////////////////////////////////////////////

CGameStateOver::CGameStateOver(CGame* g)
    : CGameState(g)
{
}

void CGameStateOver::OnMove()
{
    counter--;

    if (counter < 0)
        GotoGameState(GAME_STATE_INIT);
}

void CGameStateOver::OnBeginState()
{
    counter = 30 * 5; // 5 seconds
}

void CGameStateOver::OnInit()
{
    //
    // 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
    //     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
    //
    ShowInitProgress(66);	// 接個前一個狀態的進度，此處進度視為66%
    //
    // 開始載入資料
    //
    //Sleep(300);				// 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
    //
    // 最終進度為100%
    //
    ShowInitProgress(100);
}

void CGameStateOver::OnShow()
{
    CDC* pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC
    CFont f, *fp;
    f.CreatePointFont(160, "Times New Roman");	// 產生 font f; 160表示16 point的字
    fp = pDC->SelectObject(&f);					// 選用 font f
    pDC->SetBkColor(RGB(0, 0, 0));
    pDC->SetTextColor(RGB(255, 255, 0));
    char str[80];								// Demo 數字對字串的轉換
    sprintf(str, "Game Over ! (%d)", counter / 30);
    pDC->TextOut(240, 210, str);
    pDC->SelectObject(fp);						// 放掉 font f (千萬不要漏了放掉)
    CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC
}
/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的遊戲執行物件，主要的遊戲程式都在這裡
/////////////////////////////////////////////////////////////////////////////

CGameStateRun::CGameStateRun(CGame* g)
    : CGameState(g), NUMBALLS(1)
{
    ball = new CBall [NUMBALLS];
    picX = picY = 0;
}

CGameStateRun::~CGameStateRun()
{
    delete [] ball;
}

void CGameStateRun::OnBeginState()
{
    const int BALL_GAP = 90;
    const int BALL_XY_OFFSET = 45;
    const int BALL_PER_ROW = 7;
    const int HITS_LEFT = 3;
    const int HITS_LEFT_X = 590;
    const int HITS_LEFT_Y = 0;
    const int BACKGROUND_X = 60;
    const int ANIMATION_SPEED = 15;
    /*for (int i = 0; i < NUMBALLS; i++)  				// 設定球的起始座標
    {
        int x_pos = i % BALL_PER_ROW;
        int y_pos = i / BALL_PER_ROW;
        ball[i].SetXY(x_pos * BALL_GAP + BALL_XY_OFFSET, y_pos * BALL_GAP + BALL_XY_OFFSET);
        ball[i].SetDelay(x_pos);
        ball[i].SetIsAlive(true);
    }*/
    kirby.Initialize();
    background.SetTopLeft(BACKGROUND_X, 0);				// 設定背景的起始座標
    help.SetTopLeft(0, SIZE_Y - help.Height());			// 設定說明圖的起始座標
    hits_left.SetInteger(HITS_LEFT);					// 指定剩下的撞擊數
    hits_left.SetTopLeft(HITS_LEFT_X, HITS_LEFT_Y);		// 指定剩下撞擊數的座標
    CAudio::Instance()->Play(AUDIO_KIBY, true);			// 播放卡比主題曲
}

void CGameStateRun::OnMove()							// 移動遊戲元素
{
    //
    // 如果希望修改cursor的樣式，則將下面程式的commment取消即可
    //
    // SetCursor(AfxGetApp()->LoadCursor(IDC_GAMECURSOR));
    //
    // 移動背景圖的座標
    //
    gamemap.OnMove();

    if (picX <= SIZE_Y)
    {
        picX += 5;
        picY += 5;
    }
    else
    {
        picX = picY = 0;
    }

    if (background.Top() > SIZE_Y)
        background.SetTopLeft(60, -background.Height());

    background.SetTopLeft(background.Left(), background.Top() + 1);
    //
    // 移動球
    //
    int i;

    for (i = 0; i < NUMBALLS; i++)
        ball[i].OnMove();

    //
    // 移動卡比
    //
    kirby.OnMove();

    //
    // 判斷擦子是否碰到球
    //
    for (i = 0; i < NUMBALLS; i++)
        if (ball[i].IsAlive() && ball[i].HitKirby(&kirby))
        {
            ball[i].SetIsAlive(false);
            CAudio::Instance()->Play(AUDIO_DING);
            hits_left.Add(-1);

            //
            // 若剩餘碰撞次數為0，則跳到Game Over狀態
            //
            if (hits_left.GetInteger() <= 0)
            {
                CAudio::Instance()->Stop(AUDIO_KIBY);	// 停止音樂
                GotoGameState(GAME_STATE_OVER);
            }
        }

    //
    // 移動彈跳的球
    //
    bball.OnMove();
}

void CGameStateRun::OnInit()  								// 遊戲的初值及圖形設定
{
    //
    // 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
    //     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
    //
    ShowInitProgress(33);	// 接個前一個狀態的進度，此處進度視為33%
    //載入地圖
    gamemap.LoadBitmap();
    //
    // 開始載入資料
    //
    int i;

    for (i = 0; i < NUMBALLS; i++)
        ball[i].LoadBitmap();								// 載入第i個球的圖形

    kirby.LoadBitmap();
    background.LoadBitmap(IDB_KIRBY);					// 載入背景的圖形
    //
    // 完成部分Loading動作，提高進度
    //
    ShowInitProgress(50);
    //Sleep(300); // 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
    //
    // 繼續載入其他資料
    //
    help.LoadBitmap(IDB_HELP, RGB(255, 255, 255));				// 載入說明的圖形
    corner.LoadBitmap(IDB_CORNER);							// 載入角落圖形
    corner.ShowBitmap(background);							// 將corner貼到background
    bball.LoadBitmap();										// 載入圖形
    hits_left.LoadBitmap();
    CAudio::Instance()->Load(AUDIO_KIBY, "sounds\\kiby.wav"); // 載入音樂
    //
    // 此OnInit動作會接到CGameStaterOver::OnInit()，所以進度還沒到100%
    //
}

void CGameStateRun::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
    const char KEY_LEFT  = 0x25; // keyboard左箭頭
    const char KEY_UP    = 0x26; // keyboard上箭頭
    const char KEY_RIGHT = 0x27; // keyboard右箭頭
    const char KEY_DOWN  = 0x28; // keyboard下箭頭

    if (nChar == KEY_LEFT)
        kirby.SetMovingLeft(true);

    if (nChar == KEY_RIGHT)
        kirby.SetMovingRight(true);

    if (nChar == KEY_UP)
        kirby.SetMovingUp(true);

    if (nChar == KEY_DOWN)
        kirby.SetMovingDown(true);

    gamemap.OnKeyDown(nChar);
}

void CGameStateRun::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags)
{
    const char KEY_LEFT  = 0x25; // keyboard左箭頭
    const char KEY_UP    = 0x26; // keyboard上箭頭
    const char KEY_RIGHT = 0x27; // keyboard右箭頭
    const char KEY_DOWN  = 0x28; // keyboard下箭頭

    if (nChar == KEY_LEFT)
        kirby.SetMovingLeft(false);

    if (nChar == KEY_RIGHT)
        kirby.SetMovingRight(false);

    if (nChar == KEY_UP)
        kirby.SetMovingUp(false);

    if (nChar == KEY_DOWN)
        kirby.SetMovingDown(false);
}

void CGameStateRun::OnLButtonDown(UINT nFlags, CPoint point)  // 處理滑鼠的動作
{
    kirby.SetMovingLeft(true);
}

void CGameStateRun::OnLButtonUp(UINT nFlags, CPoint point)	// 處理滑鼠的動作
{
    kirby.SetMovingLeft(false);
}

void CGameStateRun::OnMouseMove(UINT nFlags, CPoint point)	// 處理滑鼠的動作
{
    // 沒事。如果需要處理滑鼠移動的話，寫code在這裡
}

void CGameStateRun::OnRButtonDown(UINT nFlags, CPoint point)  // 處理滑鼠的動作
{
    kirby.SetMovingRight(true);
}

void CGameStateRun::OnRButtonUp(UINT nFlags, CPoint point)	// 處理滑鼠的動作
{
    kirby.SetMovingRight(false);
}

void CGameStateRun::OnShow()
{
    //
    //  注意：Show裡面千萬不要移動任何物件的座標，移動座標的工作應由Move做才對，
    //        否則當視窗重新繪圖時(OnDraw)，物件就會移動，看起來會很怪。換個術語
    //        說，Move負責MVC中的Model，Show負責View，而View不應更動Model。
    //
    //
    //  貼上背景圖、撞擊數、球、擦子、彈跳的球
    //
    gamemap.OnShow();
    background.ShowBitmap();			// 貼上背景圖
    help.ShowBitmap();					// 貼上說明圖
    hits_left.ShowBitmap();

    for (int i = 0; i < NUMBALLS; i++)
        ball[i].OnShow();				// 貼上第i號球

    bball.OnShow();						// 貼上彈跳的球
    kirby.OnShow();					// 貼上卡比
    //
    //  貼上左上及右下角落的圖
    //
    corner.SetTopLeft(0, 0);
    corner.ShowBitmap();
    corner.SetTopLeft(SIZE_X - corner.Width(), SIZE_Y - corner.Height());
}
}